## Assignment Part-1
Q1. Why do we call Python as a general purpose and high-level programming language?

Because they are not written in machine-readable language, Python programs need to be processed before machines can run them. Python is an interpreted language. This means that every time a program is run, its interpreter runs through the code and translates it into machine-readable byte code.

Q2. Why is Python called a dynamically typed language?

Python is both a strongly typed and a dynamically typed language. Strong typing means that variables do have a type and that the type matters when performing operations on a variable. Dynamic typing means that the type of the variable is determined only during runtime.

Q3. List some pros and cons of Python programming language?

Pros
Large Community	
Flexible and Extensible	
Extensive Libraries	
Embeddable	

Cons :
Slower than compiled languages
Security
Work Environment
High memory consumption

Q4. In what all domains can we use Python?

Machine learning / Artificial intelligence
Desktop GUI
Data analytics and data visualization 
Web development
Game development
Mobile app development
Embedded systems

Q5. What are variable and how can we declare them?

int_var = 10
float_var = 18.25
string_var = 'ineuron batch2' # or another way "ineuron batch2"
bool_var = True # if we want to assign false then it should be like False

Q6. How can we take an input from the user in Python?

input()

Q7. What is the default datatype of the value that has been taken as an input using input() function?

Ans : String

Q8. What is type casting?

Type Casting is the method to convert the variable data type into a certain data type in order to the operation required to be performed by users.

# int() , float(), str(), bool()
int_var = int_var + 10  # int_var = 10 + 10 and in next step int_var = 20
casted_int_var = float(int_var)
casted_float_var = int(float_var)

Q9. Can we take more than one input from the user using single input() function? If yes, how? If no, why?

name = input("Enter value for name = ")
age = int(input("Enter value for age = "))

Q10. What are keywords?

Keywords in Python are reserved words that can not be used as a variable name, function name, or any other identifier.

The list of keywords is : 

[‘False’, ‘None’, ‘True’, ‘and’, ‘as’, ‘assert’, ‘async’, ‘await’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]



Q11. Can we use keywords as a variable? Support your answer with reason.

We can not do that.

Q12. What is indentation? What's the use of indentaion in Python?

Indentation refers to the spaces at the beginning of a code line. Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important. Python uses indentation to indicate a block of code.

Q13. How can we throw some output in Python?
  print()
Q14. What are operators in Python?

In Python, operators are special symbols that designate that some sort of computation should be performed. The values that an operator acts on are called operands. Here is an example: >>> >>> a = 10 >>> b = 20 >>> a + b 30. In this case, the + operator adds the operands a and b together.

Q15. What is difference between / and // operators?

// => floor division

x = 15
y = 2

print(15 // 2)

output : 7

/ => division

x = 15
y = 2

print(15 /2)

Output : 7.5

Q16. Write a code that gives following as an output.
```
iNeuroniNeuroniNeuroniNeuron
```

Ans : 
x = "iNeuron"* 4
print(x)

Q17. Write a code to take a number as an input from the user and check if the number is odd or even.

chk_even_odd_num = int(input("Enter Number: "))

x = chk_even_odd_num % 2

if x==0:
    print(chk_even_odd_num,"is Even Number")
else:
    print(chk_even_odd_num,"is Odd Number")    

Q18. What are boolean operator?

The logical operators and, or and not are also referred to as boolean operators. While and as well as or operator needs two operands, which may evaluate to true or false, not operator needs one operand evaluating to true or false. Boolean and operator returns true if both operands return true.

Q19. What will the output of the following?
```
1 or 0

0 and 0

True and False and True

1 or 0 or 0
```

Ans : True and False and True


Q20. What are conditional statements in Python?

A conditional statement as the name suggests itself, is used to handle conditions in your program. These statements guide the program while making decisions based on the conditions encountered by the program.

Q21. What is use of 'if', 'elif' and 'else' keywords?

if… elif…else are conditional statements that provide you with the decision making that is required when you want to execute code based on a particular condition. The if… elif…else statement used in Python helps automate that decision making process.

Q22. Write a code to take the age of person as an input and if age >= 18 display "I can vote". If age is < 18 display "I can't vote".

age = int(input("Enter Age: "))

if age >= 18:
    print("I can vote")
else:
    print("I cant't vote")

Q23. Write a code that displays the sum of all the even numbers from the given list.
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```

num1 = 12
num2 = 75
num3 = 150
num4 = 180
num5 = 145
num6 = 525
num7 = 50

#code that displays the sum of all the even numbers from the given list.


e1 = num1 % 2
e2 = num2 % 2
e3 = num3 % 2
e4 = num4 % 2
e5 = num5 % 2
e6 = num6 % 2
e7 = num7 % 2

x=0
if e1 == 0:
    print(num1, "is divisible by Number 2")

if e2 == 0:

    print(num2,"is divisible by Number 2")
    x=x+num2
if e3 == 0:
    print(num3,"is divisible by Number 2")
    x=x+num3
if e4 == 0:
    print(num4,"is divisible by Number 2")
    x=x+num4
if e5 == 0:
    print(num5,"is divisible by Number 2")
    x=x+num5
if e6 == 0:
    print(num6,"is divisible by Number 2")
    x=x+num6
if e7 == 0:
    print(num7,"is divisible by Number 2")
    x=x+num7
    
print(x,"total even number") 


Q24. Write a code to take 3 numbers as an input from the user and display the greatest no as output.

num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))
num3 = int(input("Enter third number: "))

if (num1 >= num2) and (num1 >= num3):
   largest = num1
elif (num2 >= num1) and (num2 >= num3):
   largest = num2
else:
   largest = num3

print("The largest number is", largest)

Q25. Write a program to display only those numbers from a list that satisfy the following conditions

- The number must be divisible by five

- If the number is greater than 150, then skip it and move to the next number

- If the number is greater than 500, then stop the loop
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```

num1 = 12
num2 = 75
num3 = 150
num4 = 180
num5 = 145
num6 = 525
num7 = 50

#The number must be divisible by five


e1 = num1 % 5
e2 = num2 % 5
e3 = num3 % 5
e4 = num4 % 5
e5 = num5 % 5
e6 = num6 % 5
e7 = num7 % 5


if e1 == 0:
    print(num1, "is divisible by Number 5")
else :
    if e2 == 0:
        print(num2,"is divisible by Number 5")
        
    if e3 == 0:
        print(num3,"is divisible by Number 5")
        
    if e4 == 0:
        print(num4,"is divisible by Number 5")
        
    if e5 == 0:
        print(num5,"is divisible by Number 5")
        
    if e6 == 0:
        print(num6,"is divisible by Number 5")
        
    if e7 == 0:
        print(num7,"is divisible by Number 5")
        
    
       


# If the number is greater than 150, then skip it and move to the next number
# If the number is greater than 500, then stop the loop

x = 600

if x>=150 and x>500:
    print("BYE")
	
========================================================================	

Q26. What is a string? How can we declare string in Python?

 strings in Python are arrays of bytes representing unicode characters. However, Python does not have a character data type, a single character is simply a string with a length of 1. Square brackets can be used to access elements of the string.
 
a = "Hello, World!"
print(a[1])

Q27. How can we access the string using its index?

a = "Hello, World!"
print(a[1])
Q28. Write a code to get the desired output of the following

string = "Big Data iNeuron"
print(string[9:])

string = "Big Data iNeuron"
desired_output = "iNeuron"
Q29. Write a code to get the desired output of the following

string = "Big Data iNeuron"
a = string[9:]
print(a[::-1])

string = "Big Data iNeuron"
desired_output = "norueNi"
Q30. Resverse the string given in the above question.

string = "Big Data iNeuron"
print(string[::-1])

Q31. How can you delete entire string at once?

s = 'abc12321cba'

print(s.replace(s,''))

Q32. What is escape sequence?

txt = "We are the so-called \"Vikings\" from the north."
print(txt)

Q33. How can you print the below string?

 txt = '\'iNeuron\'s Big Data Course\''
print(txt) 

'iNeuron's Big Data Course'
Q34. What is a list in Python?
Lists are used to store multiple items in a single variable.

Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.
mylist = ["apple", "banana", "cherry"]

Q35. How can you create a list in Python?

mylist = ["apple", "banana", "cherry"]
print(mylist)

Q36. How can we access the elements in a list?

thislist = ["apple", "banana", "cherry"]
print(thislist[1])

Q37. Write a code to access the word "iNeuron" from the given list.

lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]

print(lst[-2][-1])

lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
Q38. Take a list as an input from the user and find the length of the list.

lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]

print(len(lst))

Q39. Add the word "Big" in the 3rd index of the given list.

lst = ["Welcome", "to", "Data", "course"]

lst.insert(2,"Big")

print(lst)

lst = ["Welcome", "to", "Data", "course"]
Q40. What is a tuple? How is it different from list?

The primary difference between tuples and lists is that tuples are immutable as opposed to lists which are mutable. Therefore, it is possible to change a list but not a tuple.

The contents of a tuple cannot change once they have been created in Python due to the immutability of tuples.

Q41. How can you create a tuple in Python?

tuple_numbers  = (1,2,3,4,5)

print(list_numbers)

Q42. Create a tuple and try to add your name in the tuple. Are you able to do it? Support your answer with reason.

tuples are immutable. It is not possible.

Q43. Can two tuple be appended. If yes, write a code for it. If not, why?

# input tuple 1
inputTuple_1 = (12, 8, 6)
# input tuple 2
inputTuple_2 = (3, 4)
# appending/concatenating 2nd tuple to the first tuple using the + operator
resultTuple = inputTuple_1 + inputTuple_2
# printing the resultant tuple after appending
print("Resultant tuple after appending inputTuple_2 to the inputTuple_1:", resultTuple)

Q44. Take a tuple as an input and print the count of elements in it.

values = input("Input some comma seprated numbers : ")
list = values.split(",")
tuple = tuple(list) 
print(len(tuple))

Q45. What are sets in Python?

Sets are used to store multiple items in a single variable. Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage. A set is a collection which is unordered, unchangeable*, and unindexed.

Q46. How can you create a set?

set3 = {1,2,3,4,5,2,1,4}
print(set3)
print(type(set3))

Q47. Create a set and add "iNeuron" in your set.
set6 = set()
set6.add("iNeuron")
print(set6)

Q48. Try to add multiple values using add() function.
set6 = set()
set6.add(1)
set6.add(1)
set6.add(2)
set6.add(5)
set6.add(2)
set6.add(1)
set6.add(2)
print(set6)

Q49. How is update() different from add()?

tmp = [1,2,3,4,5,1,2,3,4,5,1,2,3]
set6.update(tmp)
print(set6)

Q50. What is clear() in sets?

# set of prime numbers
primeNumbers = {2, 3, 5, 7}

# clear all elements
primeNumbers.clear()

print(primeNumbers)

The clear() method removes all elements in a set.

Q51. What is frozen set?

frozenset() Method creates an immutable Set object from an iterable. It is a built-in Python function. As it is a set object therefore we cannot have duplicate values in the frozenset.

l = ["Geeks", "for", "Geeks"]
  
# converting tuple to frozenset
fnum = frozenset(l)
  
# printing empty frozenset object
print("frozenset Object is : ", fnum)

Q52. How is frozen set different from set?

A set is an unordered and unindexed collection of unique elements. Sets are mutable, you can change the elements using a built-in function like add(), remove(), etc. Since the elements are mutable and not in order, they don’t have hash values. So you can’t access the elements with the help of index numbers.

A frozenset is an unordered and unindexed collection of unique elements. It is immutable and it is hashable. It is also called an immutable set. Since the elements are fixed, unlike sets you can't add or remove elements from the set.

Q53. What is union() in sets? Explain via code.

set_a = {1,2,3,4,5,6}
set_b = {3,6,8,9,10}

# union operation
print(set_a | set_b)

output :{1, 2, 3, 4, 5, 6, 8, 9, 10}


Q54. What is intersection() in sets? Explain via code.

set_a = {1,2,3,4,5,6}
set_b = {3,6,8,9,10}

print(set_a & set_b)

output : {3, 6} 

Common value from both of the set.

Q55. What is dictionary ibn Python?

Dictionaries are used to store data values in key:value pairs.

A dictionary is a collection which is ordered, changeable and do not allow duplicates.

Q56. How is dictionary different from all other data structures.

The dictionary Data Structure in Python is an unordered collection of items. While other Data Structures use only one value as the element, the dictionary is a slightly more compound data structure. It makes use of two elements i.e. a pair of elements, namely, a key and a value.

Q57. How can we delare a dictionary in Python?

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

Q58. What will the output of the following?

var = {}
print(type(var))

output : class 'dict'
Q59. How can we add an element in a dictionary?

dict2 = {}
dict2['name'] = 'Shashank'
dict2['age'] = 22
dict2['skills'] = ['Python', 'Java']
dict2['states_visited'] = ('UP', 'Goa')
dict2[45] = 'Random Key'
dict2['other_details'] = {'color' : 'Black', 'nationality' : 'Indian'}
print(dict2)



Q60. Create a dictionary and access all the values in that dictionary.
dict2 = {}

dict2['name'] = 'Shashank'
dict2['skills'] = ['Python', 'Java']
dict2['other_details'] = {'color' : 'Black', 'nationality' : 'Indian'}



print(dict2['name'])
print(dict2['skills'][0])
print(dict2['other_details']['nationality'])

Q61. Create a nested dictionary and access all the element in the inner dictionary.

dict2['other_details'] = {'color' : 'Black', 'nationality' : 'Indian'}

Q62. What is the use of get() function?

return the value of an item that do not exist.

car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

x = car.get("price", 15000)

print(x)

Q63. What is the use of items() function?

to return the list with all dictionary keys with values.

Dictionary1 = { 'A': 'Geeks', 'B': 4, 'C': 'Geeks' }
  
print("Dictionary items:")
  
# Printing all the items of the Dictionary
print(Dictionary1.items())



Q64. What is the use of pop() function?

 removes an item at the specified index from the list.
 
 
l = [1, 2, 3, 4]
print("Popped element:", l.pop())
print("List after pop():", l)

Q65. What is the use of popitems() function?

removes the item that was last inserted into the dictionary.
car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

x = car.popitem()

print(x)

Q66. What is the use of keys() function?
 keys() function is used to return a new view object that contains a list of all the keys in the dictionary. The Python dictionary keys() method returns an object that contains all the keys in a dictionary.
 
 

Q67. What is the use of values() function?

The values() method returns a view object. The view object contains the values of the dictionary, as a list.

Q68. What are loops in Python?

 loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).

Q69. How many type of loop are there in Python?

while,for

Q70. What is the difference between for and while loops?

For loop is used when the number of iterations is already known. While loop is used when the number of iterations is already Unknown

Q71. What is the use of continue statement?

continue statement we can stop the current iteration of the loop, and continue with the next:

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    continue
  print(x) 
  
output : 
apple
cherry  

Q72. What is the use of break statement?

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    break
  print(x) 
  
output :

apple  

Q73. What is the use of pass statement?

The pass statement is used as a placeholder for future code.

When the pass statement is executed, nothing happens, but you avoid getting an error when empty code is not allowed.

def myfunction():
  pass

Q74. What is the use of range() function?

The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.

Q75. How can you loop over a dictionary?

dict2 = {}
dict2['name'] = 'Shashank'
dict2['age'] = 22
dict2['skills'] = ['Python', 'Java']
dict2['states_visited'] = ('UP', 'Goa')
dict2[45] = 'Random Key'
dict2['other_details'] = {'color' : 'Black', 'nationality' : 'Indian'}

for k,v in dict2.items():
    print("Keys is = ",k,' and Value is = ',v)

Coding problems
Q76. Write a Python program to find the factorial of a given number.

# Python program to find the factorial of a number provided by the user.

# change the value for a different result
num = 7

# To take input from the user
#num = int(input("Enter a number: "))

factorial = 1

# check if the number is negative, positive or zero
if num < 0:
   print("Sorry, factorial does not exist for negative numbers")
elif num == 0:
   print("The factorial of 0 is 1")
else:
   for i in range(1,num + 1):
       factorial = factorial*i
   print("The factorial of",num,"is",factorial)

Q77. Write a Python program to calculate the simple interest. Formula to calculate simple interest is SI = (PRT)/100

## Simple interest in python
##Enter the amount 
Amount=1000
##Enter the number of years
Year=12
##Enter the rate of interest
Rate=1.2
##Calculate the simple interest
SI=(Amount*Year*Rate)/100
print("The simple interest is: ",SI)

Q78. Write a Python program to calculate the compound interest. Formula of compound interest is A = P(1+ R/100)^t.

def compound_interest(principle, rate, time):
 
    # Calculates compound interest
    Amount = principle * (pow((1 + rate / 100), time))
    CI = Amount - principle
    print("Compound interest is", CI)
 
 
# Driver Code
compound_interest(10000, 10.25, 5)

Q79. Write a Python program to check if a number is prime or not.

n = 5

# Check if the number is greater than 1

if n > 1:
	for i in range(2, int(n/2)+1):
		if (n % i) == 0:
			print(num, "is not a prime number")
		break
	else:
		print(n, "is a prime number")
# If the number is less than 1, its also not a prime number.
else:
	print(n, "is not a prime number")

Q80. Write a Python program to check Armstrong Number.

num = int(input('Enter the three digit number to be checked for Armstrong: '))
t = num
cube_sum = 0

while t!= 0:
    k = t % 10
    cube_sum += k**3
    t = t//10
if cube_sum == num:
    print(num, ' is an Armstrong Number')
else:
    print(num, 'is not a Armstrong Number')

Q81. Write a Python program to find the n-th Fibonacci Number.

# defing the function to return the nth element of the Fibonacci Series  
def Fibonacci_series(x):   
    # assiging the variables  
    m = 0  
    n = 1  
    # using the if-elif-else conditional statements  
    if x < 0:  
        print("Wrong input")   
    elif x == 0:  
        return m   
    elif x == 1:   
        return n  
    else:  
        # using the for-loop   
        for i in range(2, x + 1):   
            o = m + n  
            m = n   
            n = o   
        return n   
# printing the twelveth term of the Fibonacci Series  
print("12th element of the Fibonacci Series:", Fibonacci_series(12))  

Q82. Write a Python program to interchange the first and last element in a list.

def swapPositions(list):
     
    list[0], list[-1] = list[-1], list[0]
    return list
 
# Driver function
List = [23, 65, 19, 90]
pos1, pos2  = 1, 3
 
print(swapPositions(List))

Q83. Write a Python program to swap two elements in a list.

def swapPositions(list, pos1, pos2):
     
    list[pos1], list[pos2] = list[pos2], list[pos1]
    return list
 
# Driver function
List = [23, 65, 19, 90]
pos1, pos2  = 1, 3
 
print(swapPositions(List, pos1-1, pos2-1))

Q84. Write a Python program to find N largest element from a list.

def N_max_elements(list, N):
    result_list = []
  
    for i in range(0, N): 
        maximum = 0
          
        for j in range(len(list)):     
            if list[j] > maximum:
                maximum = list[j]
                  
        list.remove(maximum)
        result_list.append(maximum)
          
    return result_list
  
#test
list1 = [2, 6, 41, 85, 0, 3, 7, 6, 10]
N = 2

print(N, "max elements in ",list1)
  
# Calling and printing the function
print(N_max_elements(list1, N))

Q85. Write a Python program to find cumulative sum of a list.

list1 = [1,2,3,4,5,6,7,8,9]

# Result
# result = [1,4,9,16,25,36,49,64,81]
cumsum_num = lambda x : x + x
cumsum = list(map(cumsum_num, list1))
print(cumsum)

Q86. Write a Python program to check if a string is palindrome or not.

str1 = "kanakq"
list1 = list(str1)
revstr2 = list1[ -1 : : -1 ]
revstr3 = ""
for i in revstr2:
    revstr3 += str(i)

if str1 == revstr3:
    print("Palindrom")
else:
    print("Not Palindrom")

Q87. Write a Python program to remove i'th element from a string.

input_str = "DivasDwivedi"
   
# Printing original string  
print ("Original string: " + input_str) 
   
result_str = "" 
   
for i in range(0, len(input_str)): 
    if i != 3: 
        result_str = result_str + input_str[i] 
   
# Printing string after removal   
print ("String after removal of i'th character : " + result_str)

Q88. Write a Python program to check if a substring is present in a given string.

str1 = "Python is tought in iNeuron"
substr2 = "iNeuron"
s = str1.split(" ")
print(s)

for x in s:
    if x == substr2:
        print("Present")
        break
    else:
        print("Not Present")
        continue 

Q89. Write a Python program to find words which are greater than given length k.

k = 3
s ="Python is good"
word_k(k, s)


s = "Python is good"
k=3
word = s.split(" ")


result1 = [  x for x in word if len(x) > k   ]


print(result1 )

Q90. Write a Python program to extract unquire dictionary values.

# Python program to shuffle dictionary Values...

# Initialising dictionary
myDict = {'Scala': 2, 'Javascript': 1, 'Python': 8, 'C++': 1, 'Java': 4}

# extracting unique values using set comprehension
uniqueValues = list({val for val in myDict.values() })
  
# Printing the dictionary and unique values...
print("Dictionary = ", end = " ")
print(myDict)
print("Unique Values = ", end = " ")
print(uniqueValues)

Q91. Write a Python program to merge two dictionary.

dict_1 = {1: 'a', 2: 'b'}
dict_2 = {2: 'c', 4: 'd'}

print({**dict_1, **dict_2})

Q92. Write a Python program to convert a list of tuples into dictionary.

list1 = [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
dict1 = dict(list1)
print(dict1)

Input : [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
Output : {'Sachin': 10, 'MSD': 7, 'Kohli': 18, 'Rohit': 45}
Q93. Write a Python program to create a list of tuples from given list having number and its cube in each tuple.

def cube(n):
    cube = n*n*n
    return cube
k=0
t1=()
pairCombi = []
list6 = [9,5,6]
for i in list6:
    num = list6[k]
    cube_ans = cube(num)
    pairCombi.append((i,cube_ans))
    k=k+1
print("Result is  : ",pairCombi)

Input: list = [9, 5, 6]
Output: [(9, 729), (5, 125), (6, 216)]
Q94. Write a Python program to get all combinations of 2 tuples.

tuple1 = (7, 2)
tuple2 = (7, 8)
print("First tuple : " + str(tuple1))
print("Second tuple : " + str(tuple2))

# finding all pair Combination of tuples 
pairCombi = [] 
for val1 in tuple1:
    for val2 in tuple2:
        tup = [val1, val2]
        pairCombi.append(tuple(tup))

for val1 in tuple2:
    for val2 in tuple1:
        tup = [val1, val2]
        pairCombi.append(tuple(tup))

# Printing tuple Combination 
print("All pair Combinations are  : " + str(pairCombi))

Input : test_tuple1 = (7, 2), test_tuple2 = (7, 8)
Output : [(7, 7), (7, 8), (2, 7), (2, 8), (7, 7), (7, 2), (8, 7), (8, 2)]
Q95. Write a Python program to sort a list of tuples by second item.

def tuple_sort(my_tuple):
   return(sorted(my_tuple, key = lambda x: x[1]))
my_tuple = [('for', 24), ('Geeks', 8), ('Geeks', 30)] 
print("The list of tuple is : ")
print(my_tuple)
print("After sorting, the list of tuple becomes : ")
print(tuple_sort(my_tuple))


Input : [('for', 24), ('Geeks', 8), ('Geeks', 30)] 
Output : [('Geeks', 8), ('for', 24), ('Geeks', 30)]
Q96. Write a python program to print below pattern.

rows = 5
for i in range(rows):
    for j in range(i+1):
        print("*", end=" ")
    print("\n")



* 
* * 
* * * 
* * * * 
* * * * * 
Q97. Write a python program to print below pattern.

def pypart2(n):
     
    # number of spaces
    k = 2*n - 2
 
    # outer loop to handle number of rows
    for i in range(0, n):
     
        # inner loop to handle number spaces
        # values changing acc. to requirement
        for j in range(0, k):
            print(end=" ")
     
        # decrementing k after each loop
        k = k - 2
     
        # inner loop to handle number of columns
        # values changing acc. to outer loop
        for j in range(0, i+1):
         
            # printing stars
            print("* ", end="")
     
        # ending line after each row
        print("\r")
 
# Driver Code
n = 5
pypart2(n)

    *
   **
  ***
 ****
*****
Q98. Write a python program to print below pattern.

rows = 5

k = 0

for i in range(1, rows+1):
    for space in range(1, (rows-i)+1):
        print(end="  ")
   
    while k!=(2*i-1):
        print("* ", end="")
        k += 1
   
    k = 0
    print()

    * 
   * * 
  * * * 
 * * * * 
* * * * * 
Q99. Write a python program to print below pattern.

rows = 5

for i in range(rows):
    for j in range(i+1):
        print(j+1, end=" ")
    print("\n")

1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5
Q100. Write a python program to print below pattern.

rows = 5

ascii_value = 65

for i in range(rows):
    for j in range(i+1):
        alphabet = chr(ascii_value)
        print(alphabet, end=" ")
    
    ascii_value += 1
    print("\n")

A 
B B 
C C C 
D D D D 
E E E E E 
